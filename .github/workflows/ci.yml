name: CI/CD with Docker
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4
      - name: Docker Buildxをセットアップ
        uses: docker/setup-buildx-action@v3
      - name: Dockerメタデータを生成
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            mura0914/centos-nginx
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest
      - name: DockerHubにログイン
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Dockerイメージをビルド、プッシュ
        uses: docker/build-push-action@v6
        with:
          context: docker/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: リポジトリの内容を表示
        run: |
          echo "現在のディレクトリ: $(pwd)"
          ls -la
      
      # Dockerコンテナを起動（Flaskアプリ用の設定が必要な場合は追加）
      - name: Nginxコンテナ起動
        run: |
          docker run -d --name my-nginx-container -p 80:80 mura0914/centos-nginx:latest

      # Pythonをセットアップ
      - name: Pythonをセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # 必要なバージョンを指定

      # 仮想環境を作成し、依存関係をインストール
      - name: 仮想環境を作成し、依存関係をインストール
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt  # Flaskなどの必要なパッケージをrequirements.txtに記載しておく

      # Flaskアプリケーションをバックグラウンドで起動
      - name: Flaskアプリケーションをバックグラウンドで起動
        run: |
          source venv/bin/activate
          nohup flask run --host=0.0.0.0 --port=5000 &

      # Flaskアプリケーションのレスポンスを確認（Nginx経由で確認する）
      - name: Flaskアプリケーションのレスポンスを確認
        run: |
          sleep 5  # サーバーが起動するのを待つ
          curl http://localhost:80  # Nginxを介してFlaskアプリのレスポンスを確認

      # コンテナとアプリケーションを停止・削除
      - name: コンテナとアプリケーションの停止・削除
        run: |
          docker stop my-nginx-container
          docker rm my-nginx-container
          pkill flask  # Flaskアプリケーションの停止
